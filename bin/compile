#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat $1/.cfbuildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi
  
  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir
    
    if [ "$branch" != "" ]; then
      echo "======> Get Branch: $branch"
      git checkout $branch >/dev/null 2>&1
    fi
    echo "Check FileMode on detect, compile and release script"
    # we'll get errors later if these are needed and don't exist   
    if [ -f "$dir/bin/detect" ]; then
      echo "chmod on $dir/bin/detect"
      chmod -f +x +r +w $dir/bin/detect
    else 
      echo "File $dir/bin/detect not found"
    fi

    if [ -f "$dir/bin/compile" ]; then
      echo "chmod on $dir/bin/compile"
      chmod -f +x +r +w $dir/bin/compile
    else 
      echo "File $dir/bin/compile not found"
    fi

    if [ -f "$dir/bin/release" ]; then
      echo "chmod on $dir/bin/release"
      chmod -f +x +r +w $dir/bin/release
    else 
      echo "File $dir/bin/release not found"
    fi
    echo "ls bin folder: "
    ls -l $dir/bin/
    
    framework=$($dir/bin/detect $1 || true)
    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
    else
      echo "=====> Detection failed - ignoring result"
    fi
    
    $dir/bin/compile $1 $2 $3

    if [ $? != 0 ]; then
      exit 1
    fi

    # check if the buildpack left behind an environment for subsequent ones
    if [ -e $dir/export ]; then
      source $dir/export
    fi

    if [ -x $dir/bin/release ]; then
      $dir/bin/release $1 > $1/last_pack_release.out
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
  cat $1/last_pack_release.out
fi
